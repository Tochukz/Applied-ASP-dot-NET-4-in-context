//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StylingContent
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TrainingDataEntities : DbContext
    {
        public TrainingDataEntities()
            : base("name=TrainingDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Athlete> Athletes { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<EventType> EventTypes { get; set; }
        public DbSet<ReferenceTime> ReferenceTimes { get; set; }
    
        public virtual ObjectResult<Ranking> GetPersonalRanking(string athleteName, string eventType, Nullable<System.TimeSpan> swimTime, Nullable<System.TimeSpan> cycleTime, Nullable<System.TimeSpan> runTime, Nullable<System.TimeSpan> overallTime)
        {
            var athleteNameParameter = athleteName != null ?
                new ObjectParameter("AthleteName", athleteName) :
                new ObjectParameter("AthleteName", typeof(string));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var swimTimeParameter = swimTime.HasValue ?
                new ObjectParameter("SwimTime", swimTime) :
                new ObjectParameter("SwimTime", typeof(System.TimeSpan));
    
            var cycleTimeParameter = cycleTime.HasValue ?
                new ObjectParameter("CycleTime", cycleTime) :
                new ObjectParameter("CycleTime", typeof(System.TimeSpan));
    
            var runTimeParameter = runTime.HasValue ?
                new ObjectParameter("RunTime", runTime) :
                new ObjectParameter("RunTime", typeof(System.TimeSpan));
    
            var overallTimeParameter = overallTime.HasValue ?
                new ObjectParameter("OverallTime", overallTime) :
                new ObjectParameter("OverallTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ranking>("GetPersonalRanking", athleteNameParameter, eventTypeParameter, swimTimeParameter, cycleTimeParameter, runTimeParameter, overallTimeParameter);
        }
    
        public virtual ObjectResult<Ranking> GetReferenceRanking(string eventType, Nullable<System.TimeSpan> swimTime, Nullable<System.TimeSpan> cycleTime, Nullable<System.TimeSpan> runTime, Nullable<System.TimeSpan> overallTime)
        {
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var swimTimeParameter = swimTime.HasValue ?
                new ObjectParameter("SwimTime", swimTime) :
                new ObjectParameter("SwimTime", typeof(System.TimeSpan));
    
            var cycleTimeParameter = cycleTime.HasValue ?
                new ObjectParameter("CycleTime", cycleTime) :
                new ObjectParameter("CycleTime", typeof(System.TimeSpan));
    
            var runTimeParameter = runTime.HasValue ?
                new ObjectParameter("RunTime", runTime) :
                new ObjectParameter("RunTime", typeof(System.TimeSpan));
    
            var overallTimeParameter = overallTime.HasValue ?
                new ObjectParameter("OverallTime", overallTime) :
                new ObjectParameter("OverallTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ranking>("GetReferenceRanking", eventTypeParameter, swimTimeParameter, cycleTimeParameter, runTimeParameter, overallTimeParameter);
        }
    }
}
